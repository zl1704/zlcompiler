/*
 * Token.cpp
 *
 *  Created on: 2017年12月5日
 *      Author: ZL
 */

#include "Token.hpp"
vector<string> Token::tokens;
vector<string> Token::tokenStrs;
 void Token::init(){
	 	tokens.resize(CUSTOM+1);
	 	tokens[0] = "EMPTIY";
	 	tokens[ EOF_ ] =  "EOF_";
	 	tokens[ ERROR] =  "ERROR";
	 	tokens[ IDENTIFIER]  =  "IDENTIFIER";
	 	tokens[ ABSTRACT]  =  "ABSTRACT";  //("abstract"),
	 	tokens[ ASSERT ] =  "ASSERT";  //("assert"),
	 	tokens[ BOOLEAN ] =  "BOOLEAN";  //("boolean"),
	 	tokens[ BREAK ] =  "BREAK";  //("break"),
	 	tokens[ BYTE ] =  "BYTE";  // ("byte"),
	 	tokens[ CASE ] =  "CASE";  //("case"),
	 	tokens[ CATCH ] =  "CATCH";  //("catch"),
	 	tokens[ CHAR ] =  "CHAR";  //("char"),
	 	tokens[ CLASS ] =  "CLASS";  //("class"),
	 	tokens[ CONST ] =  "CONST";  //("const"),
	 	tokens[ CONTINUE ] =  "CONTINUE";  //("continue"),
	 	tokens[ DEFAULT ] =  "DEFAULT";  //("default"),
	 	tokens[ DO ] =  "DO";  //("do"),
	 	tokens[ DOUBLE ] =  "DOUBLE";  //("double"),
	 	tokens[ ELSE ] =  "ELSE";  //("else"),
	 	tokens[ ENUM ] =  "ENUM";  //("enum"),
	 	tokens[ EXTENDS ] =  "EXTENDS";  //("extends"),
	 	tokens[ FINAL ] =  "FINAL";  //("final"),
	 	tokens[ FINALLY ] =  "FINALLY";  //("finally"),
	 	tokens[ FLOAT ] =  "FLOAT";  //("float"),
	 	tokens[ FOR ] =  "FOR";  //("for"),
	 	tokens[ GOTO ] =  "GOTO";  //("goto"),
	 	tokens[ IF ] =  "IF";  //("if"),
	 	tokens[ IMPLEMENTS ] =  "IMPLEMENTS";  //("implements"),
	 	tokens[ IMPORT ] =  "IMPORT";  //("import"),
	 	tokens[ INSTANCEOF ] =  "INSTANCEOF";  //("instanceof"),
	 	tokens[ INT ] =  "INT";  //("int"),
	 	tokens[ INTERFACE ] =  "INTERFACE";  //("interface"),
	 	tokens[ LONG ] =  "LONG";  //("long"),
	 	tokens[ NATIVE ] =  "NATIVE";  //("native"),
	 	tokens[ NEW ] =  "NEW";  //("new"),
	 	tokens[ PACKAGE ] =  "PACKAGE";  //("package"),
	 	tokens[ PRIVATE ] =  "PRIVATE";  //("private"),
	 	tokens[ PROTECTED ] =  "PROTECTED";  //("protected"),
	 	tokens[ PUBLIC ] =  "PUBLIC";  //("public"),
	 	tokens[ RETURN ] =  "RETURN";  //("return"),
	 	tokens[ SHORT ] =  "SHORT";  //("short"),
	 	tokens[ STATIC ] =  "STATIC";  //("static const"),
	 	tokens[ STRICTFP ] =  "STRICTFP";  //("strictfp"),
	 	tokens[ STRING ] =  "STRING";  //("String"),
	 	tokens[ SUPER ] =  "SUPER";  //("super"),
	 	tokens[ SWITCH ] =  "SWITCH";  //("switch"),
	 	tokens[ SYNCHRONIZED ] =  "SYNCHRONIZED";  //("synchronized"),
	 	tokens[ THIS ] =  "THIS";  //("this"),
	 	tokens[ THROW ] =  "THROW";  //("throw"),
	 	tokens[ THROWS ] =  "THROWS";  //("throws"),
	 	tokens[ TRANSIENT ] =  "TRANSIENT";  //("transient"),
	 	tokens[ TRY ] =  "TRY";  //("try"),
	 	tokens[ VOID ] =  "VOID";  //("void"),
	 	tokens[ VOLATILE ] =  "VOLATILE";  //("volatile"),
	 	tokens[ WHILE ] =  "WHILE";  //("while"),
	 	tokens[ INTLITERAL ] =  "INTLITERAL";
	 	tokens[ LONGLITERAL ] =  "INTLITERAL";
	 	tokens[ FLOATLITERAL ] =  "FLOATLITERAL";
	 	tokens[ DOUBLELITERAL ] =  "DOUBLELITERAL";
	 	tokens[ CHARLITERAL ] =  "CHARLITERAL";
	 	tokens[ STRINGLITERAL ] =  "STRINGLITERAL";
	 	tokens[ TRUE ] =  "TRUE";  //("true"),
	 	tokens[ FALSE ] =  "FALSE";  //("false"),
	 	tokens[ NULL_ ] =  "NULL_";  //("null"),
	 	tokens[ LPAREN ] =  "LPAREN";  //("("),
	 	tokens[ RPAREN ] =  "RPAREN";  //(")"),
	 	tokens[ LBRACE ] =  "LBRACE";  //("{"),
	 	tokens[ RBRACE ] =  "RBRACE";  //("}"),
	 	tokens[ LBRACKET ] =  "LBRACKET";  //("["),
	 	tokens[ RBRACKET ] =  "RBRACKET";  //("]"),
	 	tokens[ SEMI ] =  "SEMI";  //(";"),
	 	tokens[ COMMA ] =  "COMMA";  //(","),
	 	tokens[ DOT ] =  "DOT";  //("."),
	 	tokens[ ELLIPSIS ] =  "ELLIPSIS";  //("..."),
	 	tokens[ EQ ] =  "EQ";  //("] ="),
	 	tokens[ GT ] =  "GT";  //(">"),
	 	tokens[ LT ] =  "LT";  //("<"),
	 	tokens[ BANG ] =  "BANG";  //("!"),
	 	tokens[ TILDE ] =  "TILDE";  //("~"),
	 	tokens[ QUES ] =  "QUES";  //("?"),
	 	tokens[ COLON ] =  "COLON";  //(":"),
	 	tokens[ EQEQ ] =  "EQEQ";  //("] =] ="),
	 	tokens[ LTEQ ] =  "LTEQ";  //("<] ="),
	 	tokens[ GTEQ ] =  "GTEQ";  //(">] ="),
	 	tokens[ BANGEQ ] =  "BANGEQ";  //("!] ="),
	 	tokens[ AMPAMP ] =  "AMPAMP";  //("&&"),
	 	tokens[ BARBAR ] =  "BARBAR";  //("||"),
	 	tokens[ PLUSPLUS ] =  "PLUSPLUS";
	 	tokens[ SUBSUB ] =  "SUBSUB";  //("--"),
	 	tokens[ PLUS ] =  "PLUS";
	 	tokens[ SUB ] =  "SUB";  //("-"),
	 	tokens[ STAR ] =  "STAR";  //("*"),
	 	tokens[ SLASH ] =  "SLASH";  //("/"),
	 	tokens[ AMP ] =  "AMP";  //("&"),
	 	tokens[ BAR ] =  "BAR";  //("|"),
	 	tokens[ CARET ] =  "CARET";  //("^"),
	 	tokens[ PERCENT ] =  "PERCENT";  //("%"),
	 	tokens[ LTLT ] =  "LTLT";  //("<<"),
	 	tokens[ GTGT ] =  "GTGT";  //(">>"),
	 	tokens[ GTGTGT ] =  "GTGTGT";  //(">>>"),
	 	tokens[ PLUSEQ ] =  "PLUSEQ";
	 	tokens[ SUBEQ ] =  "SUBEQ";  //("-="),
	 	tokens[ STAREQ ] =  "STAREQ";  //("*="),
	 	tokens[ SLASHEQ ] =  "SLASHEQ";  //("/="),
	 	tokens[ AMPEQ ] =  "AMPEQ";  //("&="),
	 	tokens[ BAREQ ] =  "BAREQ";  //("|="),
	 	tokens[ CARETEQ ] =  "CARETEQ";  //("^="),
	 	tokens[ PERCENTEQ ] =  "PERCENTEQ";  //("%="),
	 	tokens[ LTLTEQ ] =  "LTLTEQ";  //("<<="),
	 	tokens[ GTGTEQ ] =  "GTGTEQ";  //(">>="),
	 	tokens[ GTGTGTEQ ] =  "GTGTGTEQ";  //(">>>="),
	 	tokens[ MONKEYS_AT ] =  "MONKEYS_AT";  //("@"),
	 	tokens[ CUSTOM ] =  "CUSTOM";

	 	tokenStrs.resize (CUSTOM+1) ;
	 	tokenStrs[0] = "EMPTIY";
	 	tokenStrs[ EOF_ ] =  "EOF_";
	 	tokenStrs[ ERROR] =  "ERROR";
	 	tokenStrs[ IDENTIFIER]  =  "IDENTIFIER";
	 	tokenStrs[ ABSTRACT]  =   "abstract" ,
	 	tokenStrs[ ASSERT ] =   "assert" ,
	 	tokenStrs[ BOOLEAN ] =   "boolean" ,
	 	tokenStrs[ BREAK ] =   "break" ,
	 	tokenStrs[ BYTE ] =    "byte" ,
	 	tokenStrs[ CASE ] =   "case" ,
	 	tokenStrs[ CATCH ] =   "catch" ,
	 	tokenStrs[ CHAR ] =   "char" ,
	 	tokenStrs[ CLASS ] =   "class" ,
	 	tokenStrs[ CONST ] =   "const" ,
	 	tokenStrs[ CONTINUE ] =   "continue" ,
	 	tokenStrs[ DEFAULT ] =   "default" ,
	 	tokenStrs[ DO ] =   "do" ,
	 	tokenStrs[ DOUBLE ] =   "double" ,
	 	tokenStrs[ ELSE ] =   "else" ,
	 	tokenStrs[ ENUM ] =   "enum" ,
	 	tokenStrs[ EXTENDS ] =   "extends" ,
	 	tokenStrs[ FINAL ] =   "final" ,
	 	tokenStrs[ FINALLY ] =   "finally" ,
	 	tokenStrs[ FLOAT ] =   "float" ,
	 	tokenStrs[ FOR ] =   "for" ,
	 	tokenStrs[ GOTO ] =   "goto" ,
	 	tokenStrs[ IF ] =   "if" ,
	 	tokenStrs[ IMPLEMENTS ] =   "implements" ,
	 	tokenStrs[ IMPORT ] =   "import" ,
	 	tokenStrs[ INSTANCEOF ] =   "instanceof" ,
	 	tokenStrs[ INT ] =   "int" ,
	 	tokenStrs[ INTERFACE ] =   "interface" ,
	 	tokenStrs[ LONG ] =   "long" ,
	 	tokenStrs[ NATIVE ] =   "native" ,
	 	tokenStrs[ NEW ] =   "new" ,
	 	tokenStrs[ PACKAGE ] =   "package" ,
	 	tokenStrs[ PRIVATE ] =   "private" ,
	 	tokenStrs[ PROTECTED ] =   "protected" ,
	 	tokenStrs[ PUBLIC ] =   "public" ,
	 	tokenStrs[ RETURN ] =   "return" ,
	 	tokenStrs[ SHORT ] =   "short" ,
	 	tokenStrs[ STATIC ] =   "static const" ,
	 	tokenStrs[ STRICTFP ] =   "strictfp" ,
	 	tokenStrs[ STRING ] =   "String" ,
	 	tokenStrs[ SUPER ] =   "super" ,
	 	tokenStrs[ SWITCH ] =   "switch" ,
	 	tokenStrs[ SYNCHRONIZED ] =   "synchronized" ,
	 	tokenStrs[ THIS ] =   "this" ,
	 	tokenStrs[ THROW ] =   "throw" ,
	 	tokenStrs[ THROWS ] =   "throws" ,
	 	tokenStrs[ TRANSIENT ] =   "transient" ,
	 	tokenStrs[ TRY ] =   "try" ,
	 	tokenStrs[ VOID ] =   "void" ,
	 	tokenStrs[ VOLATILE ] =   "volatile" ,
	 	tokenStrs[ WHILE ] =   "while" ,
	 	tokenStrs[ INTLITERAL ] =  "INTLITERAL";
	 	tokenStrs[ LONGLITERAL ] =  "INTLITERAL";
	 	tokenStrs[ FLOATLITERAL ] =  "FLOATLITERAL";
	 	tokenStrs[ DOUBLELITERAL ] =  "DOUBLELITERAL";
	 	tokenStrs[ CHARLITERAL ] =  "CHARLITERAL";
	 	tokenStrs[ STRINGLITERAL ] =  "STRINGLITERAL";
	 	tokenStrs[ TRUE ] =   "true" ,
	 	tokenStrs[ FALSE ] =   "false" ,
	 	tokenStrs[ NULL_ ] =   "null" ,
	 	tokenStrs[ LPAREN ] =   "(" ,
	 	tokenStrs[ RPAREN ] =   ")" ,
	 	tokenStrs[ LBRACE ] =   "{" ,
	 	tokenStrs[ RBRACE ] =   "}" ,
	 	tokenStrs[ LBRACKET ] =   "[" ,
	 	tokenStrs[ RBRACKET ] =   "]" ,
	 	tokenStrs[ SEMI ] =   ";" ,
	 	tokenStrs[ COMMA ] =   "," ,
	 	tokenStrs[ DOT ] =   "." ,
	 	tokenStrs[ ELLIPSIS ] =   "..." ,
	 	tokenStrs[ EQ ] =   "] =" ,
	 	tokenStrs[ GT ] =   ">" ,
	 	tokenStrs[ LT ] =   "<" ,
	 	tokenStrs[ BANG ] =   "!" ,
	 	tokenStrs[ TILDE ] =   "~" ,
	 	tokenStrs[ QUES ] =   "?" ,
	 	tokenStrs[ COLON ] =   ":" ,
	 	tokenStrs[ EQEQ ] =   "] =] =" ,
	 	tokenStrs[ LTEQ ] =   "<] =" ,
	 	tokenStrs[ GTEQ ] =   ">] =" ,
	 	tokenStrs[ BANGEQ ] =   "!] =" ,
	 	tokenStrs[ AMPAMP ] =   "&&" ,
	 	tokenStrs[ BARBAR ] =   "||" ,
	 	tokenStrs[ PLUSPLUS ] =  "++";
	 	tokenStrs[ SUBSUB ] =   "--" ,
	 	tokenStrs[ PLUS ] =  "+";
	 	tokenStrs[ SUB ] =   "-" ,
	 	tokenStrs[ STAR ] =   "*" ,
	 	tokenStrs[ SLASH ] =   "/" ,
	 	tokenStrs[ AMP ] =   "&" ,
	 	tokenStrs[ BAR ] =   "|" ,
	 	tokenStrs[ CARET ] =   "^" ,
	 	tokenStrs[ PERCENT ] =   "%" ,
	 	tokenStrs[ LTLT ] =   "<<" ,
	 	tokenStrs[ GTGT ] =   ">>" ,
	 	tokenStrs[ GTGTGT ] =   ">>>" ,
	 	tokenStrs[ PLUSEQ ] =  "+=";
	 	tokenStrs[ SUBEQ ] =   "-=" ,
	 	tokenStrs[ STAREQ ] =   "*=" ,
	 	tokenStrs[ SLASHEQ ] =   "/=" ,
	 	tokenStrs[ AMPEQ ] =   "&=" ,
	 	tokenStrs[ BAREQ ] =   "|=" ,
	 	tokenStrs[ CARETEQ ] =   "^=" ,
	 	tokenStrs[ PERCENTEQ ] =   "%=" ,
	 	tokenStrs[ LTLTEQ ] =   "<<=" ,
	 	tokenStrs[ GTGTEQ ] =   ">>=" ,
	 	tokenStrs[ GTGTGTEQ ] =   ">>>=" ,
	 	tokenStrs[ MONKEYS_AT ] =   "@" ,
	 	tokenStrs[ CUSTOM ] =  "CUSTOM";
}

